name: Build and Publish Ceph AIO

on:
  schedule:
    # Run weekly on Monday at 00:00 UTC to catch new Ceph releases
    - cron: '0 0 * * 1'
  push:
    branches:
      - main
    paths:
      - 'Containerfile'
      - 'scripts/**'
      - 'bootstrap.sh'
      - 'entrypoint.sh'
      - 'supervisord.conf'
      - 'test-suite.sh'
      - '.github/workflows/build-and-publish.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ceph_versions:
        description: 'Comma-separated list of Ceph versions to build (e.g., v19,v18,v17)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests and go straight to publish'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: quay.io
  IMAGE_NAME: benjamin_holmes/ceph-aio

jobs:
  # Job 1: Discover latest stable Ceph versions
  discover-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-versions.outputs.versions }}
      matrix: ${{ steps.get-versions.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Discover Ceph versions
        id: get-versions
        run: |
          # If manual workflow with specific versions
          if [ -n "${{ inputs.ceph_versions }}" ]; then
            echo "Using manually specified versions: ${{ inputs.ceph_versions }}"
            VERSIONS="${{ inputs.ceph_versions }}"
          else
            # Discover latest stable releases using skopeo
            echo "Discovering latest Ceph releases from Quay.io..."

            # Use skopeo to list all tags
            echo "Fetching tags via skopeo..."
            ALL_TAGS=$(skopeo list-tags docker://quay.io/ceph/ceph | jq -r '.Tags[]')

            # Get shorthand major version tags (v19, v18, v17, etc.)
            # These always point to the latest patch release for that major version
            MAJOR_TAGS=$(echo "$ALL_TAGS" | grep -E '^v[0-9]+$' | sort -V)

            # Get the 3 most recent major versions
            # This ensures we cover current and previous stable releases
            RECENT_MAJORS=$(echo "$MAJOR_TAGS" | tail -3)

            if [ -z "$RECENT_MAJORS" ]; then
              echo "Error: No major version tags found"
              exit 1
            fi

            # Convert to comma-separated list
            VERSIONS=$(echo "$RECENT_MAJORS" | tr '\n' ',' | sed 's/,$//')

            echo "Discovered versions: $VERSIONS"
          fi

          # Convert to JSON array for matrix (trim whitespace from each version)
          JSON_ARRAY=$(echo "$VERSIONS" | jq -R -s -c 'split(",") | map(select(length > 0) | gsub("^\\s+|\\s+$"; ""))')

          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT
          echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT

          echo "Final matrix: $JSON_ARRAY"

  # Job 2: Build, test, and publish each version independently
  build-test-publish:
    needs: discover-versions
    if: ${{ inputs.skip_tests != true }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ceph_version: ${{ fromJson(needs.discover-versions.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing (amd64 only)
        run: |
          echo "Building Ceph AIO for version ${{ matrix.ceph_version }} (amd64 for testing)"

          # Generate build date in YYYYMMDD format (matching Ceph's format)
          BUILD_DATE=$(date +%Y%m%d)

          # Build for amd64 only (for testing on GitHub runners)
          docker buildx build \
            --platform linux/amd64 \
            --build-arg CEPH_VERSION=${{ matrix.ceph_version }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE} \
            --file Containerfile \
            --load \
            .

      - name: Check available disk space
        run: |
          echo "=== Disk space before tests ==="
          df -h
          echo "=== Docker system df ==="
          docker system df

      - name: Run test suite
        run: |
          echo "Running comprehensive test suite for ${{ matrix.ceph_version }}"

          # Make test script executable
          chmod +x test-suite.sh

          # Run tests with full image path
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }} ./test-suite.sh
        timeout-minutes: 30

      - name: Collect logs on failure
        if: failure()
        run: |
          # Container name matches the version and platform being tested
          PLATFORM_SLUG="$(echo "${{ matrix.platform }}" | sed 's/[^a-zA-Z0-9_-]/_/g')"
          CONTAINER_NAME="ceph-test-$(echo "${{ matrix.ceph_version }}" | sed 's/[^a-zA-Z0-9_-]/_/g')-${PLATFORM_SLUG}"

          echo "::group::Disk usage inside container"
          docker exec $CONTAINER_NAME df -h 2>&1 || echo "Cannot check disk usage"
          echo "::endgroup::"

          echo "::group::Container logs"
          docker logs $CONTAINER_NAME 2>&1 || echo "No container logs available"
          echo "::endgroup::"

          echo "::group::Supervisor logs"
          docker exec $CONTAINER_NAME cat /var/log/supervisor/supervisord.log 2>&1 || echo "No supervisor logs available"
          echo "::endgroup::"

          echo "::group::OSD-0 stdout log"
          docker exec $CONTAINER_NAME cat /var/log/supervisor/ceph-osd-0-stdout.log 2>&1 || echo "No OSD-0 stdout log"
          echo "::endgroup::"

          echo "::group::OSD-0 stderr log"
          docker exec $CONTAINER_NAME cat /var/log/supervisor/ceph-osd-0-stderr.log 2>&1 || echo "No OSD-0 stderr log"
          echo "::endgroup::"

          echo "::group::Ceph status"
          docker exec $CONTAINER_NAME ceph -s 2>&1 || echo "Ceph not accessible"
          echo "::endgroup::"

      - name: Cleanup test container
        if: always()
        run: |
          # Container name matches the version being tested
          CONTAINER_NAME="ceph-test-$(echo "${{ matrix.ceph_version }}" | sed 's/[^a-zA-Z0-9_-]/_/g')"
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true

      # Publish steps - only run if tests passed and on main branch
      - name: Set up QEMU for multi-platform builds
        if: |
          success() &&
          github.event_name != 'pull_request' &&
          (github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        uses: docker/setup-qemu-action@v3

      - name: Log in to Quay.io
        if: |
          success() &&
          github.event_name != 'pull_request' &&
          (github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and push multi-platform images
        if: |
          success() &&
          github.event_name != 'pull_request' &&
          (github.ref == 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          echo "Building and pushing Ceph AIO for version ${{ matrix.ceph_version }}"

          # Generate build date in YYYYMMDD format (matching Ceph's format)
          BUILD_DATE=$(date +%Y%m%d)

          # Build and push multi-platform image with dated tag
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg CEPH_VERSION=${{ matrix.ceph_version }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE} \
            --file Containerfile \
            --provenance=false \
            --sbom=false \
            --push \
            .

          # Push rolling tag (no expiration) - references same manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE}

          # Add expiration annotation to dated tag
          docker buildx imagetools create \
            --annotation "index:quay.expires-after=8w" \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE}

          echo "Successfully pushed multi-platform images:"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }} (rolling, no expiration)"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE} (immutable, expires in 8 weeks)"
          echo "  - Platforms: linux/amd64, linux/arm64"

  # Job 2b: Build and publish (skip tests) for manual workflow
  build-and-publish:
    needs: discover-versions
    if: |
      inputs.skip_tests == true &&
      github.event_name != 'pull_request' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ceph_version: ${{ fromJson(needs.discover-versions.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and push multi-platform images
        run: |
          echo "Building and pushing Ceph AIO for version ${{ matrix.ceph_version }} (tests skipped)"

          # Generate build date in YYYYMMDD format (matching Ceph's format)
          BUILD_DATE=$(date +%Y%m%d)

          # Build and push multi-platform image with dated tag
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg CEPH_VERSION=${{ matrix.ceph_version }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE} \
            --file Containerfile \
            --provenance=false \
            --sbom=false \
            --push \
            .

          # Push rolling tag (no expiration) - references same manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE}

          # Add expiration annotation to dated tag
          docker buildx imagetools create \
            --annotation "index:quay.expires-after=8w" \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE}

          echo "Successfully pushed multi-platform images:"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }} (rolling, no expiration)"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ceph_version }}-${BUILD_DATE} (immutable, expires in 8 weeks)"
          echo "  - Platforms: linux/amd64, linux/arm64"

  # Job 3: Create summary report
  summary:
    needs: [discover-versions, build-test-publish]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate workflow summary
        run: |
          echo "# Ceph AIO Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Versions Built:** ${{ needs.discover-versions.outputs.versions }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-test-publish.result }}" == "success" ]; then
            echo "✅ **All versions tested and published successfully**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "ℹ️ **Tests passed, images not published (PR build)**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some versions may have failed (check individual jobs)**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "With independent publishing, successful versions are published even if others fail." >> $GITHUB_STEP_SUMMARY
          fi
